?is.na
# Clean up affiliation file: CONTINUOUS
# Sort out APPROACH & LEAVE
library (tidyverse)
library(readxl)
library(lubridate)
library(here)
excel_file_path <- here("data", "continuous_20240827.xlsx")
continuous <- read_excel(excel_file_path, sheet = "MV")
view(continuous)
data <- continuous %>%
select(-date) %>%
mutate(date = ymd(date2)) %>%
select(-date2)
view(data)
data <- data %>%
arrange(date, time_num, Time2_num)
# Filter out everything that is not an affiliative interaction
###!!!!!!!!!!!!!!!! STILL CHECK WITH ETHOGRAM IF ALL AFFIL BEHAV IN THERE
cont_filtered <- data %>%
filter(Action %in% c("ap", "le"))
cont_filtered <- cont_filtered %>%
mutate(dyad_alph = paste(pmin(Actor, Receiver), pmax(Actor,Receiver), sep="."))
###### Give unique numbers to each ap-le duo
df <- cont_filtered
# Create a unique identifier for each day and protocol
df$identifier <- paste(df$date, df$prot_nr, sep = "_")
# Order by date, protocol, dyad, and action (to ensure 'ap' comes before 'le')
df <- df[order(df$date, df$prot_nr, df$dyad_alph, df$Action, df$Time2_num), ]
# Create a unique pairing number
df$pairing_num <- NA
pairing_counter <- 1
# Iterate over the dataframe to assign pairing numbers
for (i in seq_len(nrow(df))) {
if (df$Action[i] == "ap" && is.na(df$pairing_num[i])) {
# Find the next 'le' for the same dyad and identifier
le_index <- which(df$dyad_alph == df$dyad_alph[i] & df$Action == "le"
& is.na(df$pairing_num) & df$identifier == df$identifier[i])
if (length(le_index) > 0) {
df$pairing_num[i] <- pairing_counter
df$pairing_num[le_index[1]] <- pairing_counter
pairing_counter <- pairing_counter + 1
}
}
}
# Identify unmatched approaches or leaves
df$pairing_num[is.na(df$pairing_num)] <- "unmatched"
# Sort again based on date, protocol number and observation timestamp
df <- df %>% arrange(date, prot_nr, Time2_num)
view(df)
###### Give unique numbers to each ap-le duo
df <- cont_filtered
# Create a unique identifier for each day and protocol
df$identifier <- paste(df$date, df$prot_nr, sep = "_")
?which
df_prox1 <- df %>%
mutate(protocol_minutes = Time2_num*1440)
view(df_prox1)
excel_file_path <- here("data", "continuous_20240827.xlsx")
continuous <- read_excel(excel_file_path, sheet = "MV")
view(continuous)
data <- continuous %>%
select(-date) %>%
mutate(date = ymd(date2)) %>%
select(-date2)
view(data)
data <- data %>%
arrange(date, time_num, Time2_num)
# Filter out everything that is not an affiliative interaction
###!!!!!!!!!!!!!!!! STILL CHECK WITH ETHOGRAM IF ALL AFFIL BEHAV IN THERE
cont_filtered <- data %>%
filter(Action %in% c("ap", "le"))
cont_filtered <- cont_filtered %>%
mutate(dyad_alph = paste(pmin(Actor, Receiver), pmax(Actor,Receiver), sep="."))
###### Give unique numbers to each ap-le duo
df <- cont_filtered
# Create a unique identifier for each day and protocol
df$identifier <- paste(df$date, df$prot_nr, sep = "_")
# Order by date, protocol, dyad, and action (to ensure 'ap' comes before 'le')
df <- df[order(df$date, df$prot_nr, df$dyad_alph, df$Action, df$Time2_num), ]
# Create a unique pairing number
df$pairing_num <- NA
pairing_counter <- 1
# Iterate over the dataframe to assign pairing numbers
for (i in seq_len(nrow(df))) {
if (df$Action[i] == "ap" && is.na(df$pairing_num[i])) {
# Find the next 'le' for the same dyad and identifier
le_index <- which(df$dyad_alph == df$dyad_alph[i] & df$Action == "le"
& is.na(df$pairing_num) & df$identifier == df$identifier[i])
if (length(le_index) > 0) {
df$pairing_num[i] <- pairing_counter
df$pairing_num[le_index[1]] <- pairing_counter
pairing_counter <- pairing_counter + 1
}
}
}
# Identify unmatched approaches or leaves
df$pairing_num[is.na(df$pairing_num)] <- "unmatched"
# Sort again based on date, protocol number and observation timestamp
df <- df %>% arrange(date, prot_nr, Time2_num)
df_prox1 <- df %>%
mutate(protocol_minutes = Time2_num*1440)
view(df_prox1)
# Create a new column showing the time difference between ap and le
df_prox1$time_diff <- NA
# Calculate the difference for each pairing_num directly
for (pair_num in unique(df_prox1$pairing_num[df_prox1$pairing_num != "unmatched"])) {
# Filter rows for the current pairing number
pair_rows <- df_prox1[df_prox1$pairing_num == pair_num, ]
# Calculate the difference
time_diff <- pair_rows$protocol_minutes[pair_rows$Action == "le"] -
pair_rows$protocol_minutes[pair_rows$Action == "ap"]
# Store the difference in the 'time_diff' column
df_prox1$time_diff[df_prox1$pairing_num == pair_num] <- time_diff
}
view(df_prox1)
= 1/60
==1/60
cut_off <- 0.0333
df_prox2 <- subset(df_prox1, time_diff > cut_off)
view(df_prox2)
# Keep only one of the ap-le duo
df_prox2 <- df_prox2 %>%
subset(Action == "ap")
view(df_prox2)
