mutate(ap_le_time_FH = ap_le_time / obs_hours_SUM) %>%
mutate(ap_le_count_FH = ap_le_count / obs_hours_SUM) %>%
mutate(sb_eb_time_FH = sb_eb_time / obs_hours_SUM) %>%
mutate(sb_eb_count_FH = sb_eb_count / obs_hours_SUM) %>%
mutate(sg_eg_time_FH = sg_eg_time / obs_hours_SUM) %>%
mutate(sg_eg_count_FH = sg_eg_count / obs_hours_SUM) %>%
mutate(sp_ep_time_FH = sp_ep_time / obs_hours_SUM) %>%
mutate(sp_ep_count_FH = sp_ep_count / obs_hours_SUM) %>%
mutate(friendly_count_FH = friendly_count / obs_hours_SUM)
# _7.2 Prep for CSIall ---------------------------------------------------------
all_affiliation3 <- all_affiliation2 %>%
mutate(ap_le_time_CSI = ap_le_time_FH / mean(ap_le_time_FH, na.rm = TRUE)) %>%
mutate(ap_le_count_CSI = ap_le_count_FH / mean(ap_le_count_FH, na.rm = TRUE)) %>%
mutate(sb_eb_time_CSI = sb_eb_time_FH / mean(sb_eb_time_FH, na.rm = TRUE)) %>%
mutate(sb_eb_count_CSI = sb_eb_count_FH / mean(sb_eb_count_FH, na.rm = TRUE)) %>%
mutate(sg_eg_time_CSI = sg_eg_time_FH / mean(sg_eg_time_FH, na.rm = TRUE)) %>%
mutate(sg_eg_count_CSI = sg_eg_count_FH / mean(sg_eg_count_FH, na.rm = TRUE)) %>%
mutate(sp_ep_time_CSI = sp_ep_time_FH / mean(sp_ep_time_FH, na.rm = TRUE)) %>%
mutate(sp_ep_count_CSI = sp_ep_count_FH / mean(sp_ep_count_FH, na.rm = TRUE)) %>%
mutate(friendly_count_CSI = friendly_count_FH / mean(friendly_count_FH, na.rm = TRUE)) %>%
# show populations averages
mutate(ap_le_time_avg = mean(ap_le_time_FH, na.rm = TRUE)) %>%
mutate(ap_le_count_avg = mean(ap_le_count_FH, na.rm = TRUE)) %>%
mutate(sb_eb_time_avg = mean(sb_eb_time_FH, na.rm = TRUE)) %>%
mutate(sb_eb_count_avg = mean(sb_eb_count_FH, na.rm = TRUE)) %>%
mutate(sg_eg_time_avg = mean(sg_eg_time_FH, na.rm = TRUE)) %>%
mutate(sg_eg_count_avg = mean(sg_eg_count_FH, na.rm = TRUE)) %>%
mutate(sp_ep_time_avg = mean(sp_ep_time_FH, na.rm = TRUE)) %>%
mutate(sp_ep_count_avg = mean(sp_ep_count_FH, na.rm = TRUE)) %>%
mutate(friendly_count_avg = mean(friendly_count_FH, na.rm = TRUE))
# _7.3 Calculate CSI_all --------------------------------------------------------
CSI_all_df <- all_affiliation3 %>%
mutate(CSI_all = rowSums(across(c(ap_le_time_CSI, ap_le_count_CSI,
sb_eb_time_CSI, sb_eb_count_CSI,
sg_eg_time_CSI, sg_eg_count_CSI,
sp_ep_time_CSI, sp_ep_count_CSI,
friendly_count_CSI)))/9)
# _7.4 Prep for CSI_group ------------------------------------------------------
all_affiliation4 <- CSI_all_df %>%
filter(samepack == TRUE) %>% # Only groupmates
#filter(pack1 == "black&tan") %>%
group_by(pack1) %>%
mutate(ap_le_time_CSIgroup = ap_le_time_FH / mean(ap_le_time_FH, na.rm = TRUE)) %>% # Calculate mean within the group
mutate(ap_le_count_CSIgroup = ap_le_count_FH / mean(ap_le_count_FH, na.rm = TRUE)) %>%
mutate(sb_eb_time_CSIgroup = sb_eb_time_FH / mean(sb_eb_time_FH, na.rm = TRUE)) %>%
mutate(sb_eb_count_CSIgroup = sb_eb_count_FH / mean(sb_eb_count_FH, na.rm = TRUE)) %>%
mutate(sg_eg_time_CSIgroup = sg_eg_time_FH / mean(sg_eg_time_FH, na.rm = TRUE)) %>%
mutate(sg_eg_count_CSIgroup = sg_eg_count_FH / mean(sg_eg_count_FH, na.rm = TRUE)) %>%
mutate(sp_ep_time_CSIgroup = sp_ep_time_FH / mean(sp_ep_time_FH, na.rm = TRUE)) %>%
mutate(sp_ep_count_CSIgroup = sp_ep_count_FH / mean(sp_ep_count_FH, na.rm = TRUE)) %>%
mutate(friendly_count_CSIgroup = friendly_count_FH / mean(friendly_count_FH, na.rm = TRUE)) %>%
# Show group averages
mutate(ap_le_time_avggroup = mean(ap_le_time_FH, na.rm = TRUE)) %>% # Calculate mean within the group
mutate(ap_le_count_avggroup = mean(ap_le_count_FH, na.rm = TRUE)) %>%
mutate(sb_eb_time_avggroup = mean(sb_eb_time_FH, na.rm = TRUE)) %>%
mutate(sb_eb_count_avggroup = mean(sb_eb_count_FH, na.rm = TRUE)) %>%
mutate(sg_eg_time_avggroup = mean(sg_eg_time_FH, na.rm = TRUE)) %>%
mutate(sg_eg_count_avggroup = mean(sg_eg_count_FH, na.rm = TRUE)) %>%
mutate(sp_ep_time_avggroup = mean(sp_ep_time_FH, na.rm = TRUE)) %>%
mutate(sp_ep_count_avggroup = mean(sp_ep_count_FH, na.rm = TRUE)) %>%
mutate(friendly_count_avggroup = mean(friendly_count_FH, na.rm = TRUE)) %>%
ungroup()
# _7.5 Calculate CSI_group ----------------------------------------------------
CSI_group_df <- all_affiliation4 %>%
mutate(CSI_group = rowSums(across(c(ap_le_time_CSIgroup, ap_le_count_CSIgroup,
sb_eb_time_CSIgroup, sb_eb_count_CSIgroup,
sg_eg_time_CSIgroup, sg_eg_count_CSIgroup,
sp_ep_time_CSIgroup, sp_ep_count_CSIgroup,
friendly_count_CSIgroup)))/9)
View(CSI_group_df)
check2 <- CSI_group_df %>%
select(id1, id2, CSI_group, CSI_all)
View(check2)
# 8. COMPARISON with similar cases ---------------------------------------------
file_path <- here("data", "infanticide_constellations_20241211_FINAL.xlsx")
combos <- read_excel(file_path, sheet = "Sheet1") %>%
filter(first_mam != "anna") %>%
mutate(dyad = motherdyad) %>%
select(first_mam, second_mam, time_diff_days, pack1, dyad) %>%
left_join(select(CSI_group_df, dyad, CSI_all, CSI_group), by = "dyad")
View(combos)
unique(combos$first_mam)
# 8. COMPARISON with similar cases ---------------------------------------------
file_path <- here("data", "infanticide_constellations_20241211_FINAL.xlsx")
combos <- read_excel(file_path, sheet = "Sheet1") %>%
mutate(dyad = motherdyad) %>%
select(first_mam, second_mam, time_diff_days, pack1, dyad) %>%
left_join(select(CSI_group_df, dyad, CSI_all, CSI_group), by = "dyad")
lenght(unique(combos$first_mam))
length(unique(combos$first_mam))
length(unique(combos$second_mam))
ggplot(combos, aes(x = CSI_all, y = time_diff_days)) +
geom_point()
ggplot(combos, aes(x = CSI_group, y = time_diff_days)) +
geom_point()
ggplot(combos, aes(x = dyad, y = CSI_group)) +
geom_point()
ggplot(combos, aes(x = dyad, y = CSI_all)) +
geom_point()
ggplot(combos, aes(x = as_numeric(dyad), y = CSI_all)) +
geom_point()
combos$dyad <- as.numeric(combos$dyad)
class(combos$dyads)
class(combos$dyad)
# 8. COMPARISON with similar cases ---------------------------------------------
file_path <- here("data", "infanticide_constellations_20241211_FINAL.xlsx")
combos <- read_excel(file_path, sheet = "Sheet1") %>%
mutate(dyad = motherdyad) %>%
select(first_mam, second_mam, time_diff_days, pack1, dyad) %>%
left_join(select(CSI_group_df, dyad, CSI_all, CSI_group), by = "dyad")
class(combos$dyad)
combos$dyad <- as.numeric(as.character(combos$dyad))
# 8. COMPARISON with similar cases ---------------------------------------------
file_path <- here("data", "infanticide_constellations_20241211_FINAL.xlsx")
combos <- read_excel(file_path, sheet = "Sheet1") %>%
mutate(dyad = motherdyad) %>%
select(first_mam, second_mam, time_diff_days, pack1, dyad) %>%
left_join(select(CSI_group_df, dyad, CSI_all, CSI_group), by = "dyad")
combos$dyad2 <- which(is.na(as.numeric(combos$dyad)))
ggplot(combos, aes(x = dyad2, y = CSI_all)) +
geom_point()
ggplot(combos, aes(x = dyad2, y = CSI_all)) +
geom_point() +
geom_vline(aes(xintercept = as.numeric(dyad2)), linetype = "dashed", color = "gray") +
theme_minimal()
ggplot(combos, aes(x = dyad2, y = CSI_all)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
combos <- read_excel(file_path, sheet = "Sheet1") %>%
mutate(dyad = motherdyad) %>%
select(first_mam, second_mam, time_diff_days, pack1, dyad) %>%
left_join(select(CSI_group_df, dyad, CSI_all, CSI_group), by = "dyad") %>%
arrange(pack1)
combos$dyad2 <- which(is.na(as.numeric(combos$dyad)))
ggplot(combos, aes(x = dyad2, y = CSI_all)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
ggplot(combos, aes(x = dyad2, y = CSI_all, colour = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
ggplot(combos, aes(x = dyad2, y = CSI_all, symbol = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
ggplot(combos, aes(x = dyad2, y = CSI_all, symbols = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
ggplot(combos, aes(x = unique(dyad2), y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
combos <- read_excel(file_path, sheet = "Sheet1") %>%
mutate(dyad = motherdyad) %>%
select(first_mam, second_mam, time_diff_days, pack1, dyad) %>%
left_join(select(CSI_group_df, dyad, CSI_all, CSI_group), by = "dyad") %>%
group_by(dyad) %>%
slice(1) %>%
arrange(pack1)
View(combos)
combos$dyad2 <- which(is.na(as.numeric(combos$dyad)))
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
ggplot(combos, aes(x = dyad2, y = CSI_group, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal()
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "black", size = 3) +
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "black", size = 3)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 2, shape = 1)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 2, shape = 7)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 1, shape = 7)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 2, shape = 7)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 2, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 3, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 3, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 3, shape = 19)
# Add a new column to the dataset to indicate whether the point belongs to Anna
combos <- combos %>%
mutate(highlight = ifelse((dyad2 == 14 & CSI_all == 0.92666214) |
(dyad2 == 15 & CSI_all == 2.49271882),
"Anna's points", "Other points"))
# Plot
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1, color = highlight)) +
geom_point(size = 3) +
scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_color_manual(values = c("Anna's points" = "red", "Other points" = "black")) +
theme_minimal() +
labs(color = "Legend Title")
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point() +
scale_x_continuous(breaks = unique(combos$dyad2)) +
theme_minimal() +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 3, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 3, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 3) +
scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Pack1 Legend")
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 2) +
scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Pack1 Legend")
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 2) +
scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Pack1 Legend") +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 3, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 3, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 2) +
scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Pack") +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 3, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 3, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 2) +
scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Social group") +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 3, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 3, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 2) +
scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Social group") +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 2.5, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 2.5, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 2) +
#scale_x_continuous(breaks = unique(combos$dyad2)) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Social group") +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 2.5, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 2.5, shape = 19)
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 3) +
scale_x_continuous(
breaks = unique(combos$dyad2), # Show all dyad2 values as ticks
expand = c(0, 0)              # Avoid extra spacing at plot edges
) +
theme_minimal() +
theme(
panel.grid.major.x = element_blank(), # Remove major vertical gridlines
panel.grid.minor.x = element_blank(), # Remove minor vertical gridlines
axis.ticks.x = element_line(size = 0.5) # Add ticks to the x-axis
) +
labs(shape = "Pack1 Legend")
ggplot(combos, aes(x = dyad2, y = CSI_all, shape = pack1)) +
geom_point(size = 2) +
scale_x_continuous(
breaks = unique(combos$dyad2), # Show all dyad2 values as ticks
expand = c(0, 0)              # Avoid extra spacing at plot edges
) +
scale_shape_manual(values = c("black&tan" = 15, "carpark" = 17, "groom" = 19,
"cheese" = 18, "fruit" = 4, "nova" = 8)) +
theme_minimal() +
labs(shape = "Social group") +
# Highlight Anna's points
geom_point(aes(x = 14, y = 0.92666214),
color = "red", size = 2.5, shape = 19)  +
geom_point(aes(x = 15, y = 2.49271882),
color = "red", size = 2.5, shape = 19) +
theme(
panel.grid.major.x = element_blank(), # Remove major vertical gridlines
panel.grid.minor.x = element_blank(), # Remove minor vertical gridlines
axis.ticks.x = element_line(size = 0.5) # Add ticks to the x-axis
)
library (tidyverse)
library(readxl)
library(lubridate)
library(here)
From <- ymd("2023-03-19")
To <- ymd("2024-03-20")
excel_file_path <- here("data", "Continuous_20241224.xlsx")
continuous <- read_excel(excel_file_path, sheet = "ALL") %>%
mutate(Date = ymd(Date)) %>% # Handle date formats
# Sort chronologically.
# time_num is protocol start, Time_sec time in focal. Both converted to number (do in Excel)
arrange(Date, Time_num, Time_sec) %>%
# Create dyadcode (in alphabetical order)
mutate(dyad = paste(pmin(Actor, Receiver), pmax(Actor,Receiver), sep=".")) %>%
# Create columns with short id codes for filtering
mutate(Actor_short = str_pad(str_sub(tolower(Actor), 1, 4), 4,
pad = "_", side = "right")) %>%
mutate(Receiver_short = str_pad(str_sub(tolower(Receiver), 1, 4), 4,
pad = "_", side = "right")) %>%
# Unique identified per day and protocol
mutate(identifier = paste(Date, Prot_nr, sep = "_")) %>%
# Only include rows where Actor or Receiver are the focal individual
filter(Actor == Focal_id | Receiver == Focal_id) %>%
filter(Date > From & Date < To) %>% # Set time window
filter(Obs != "nt" | Obs != "nth")
file_path <- here("data", "adult_id.xlsx")
id_groups <- read_excel(file_path, sheet = "all_20232024") %>%
mutate(id = str_pad(str_sub(tolower(id_long), 1, 4), 4,
pad = "_", side = "right")) %>%
mutate(id = ifelse(id == "date", "datt", id)) %>%
select(-sex, -id_long)
id_groups <- id_groups %>%
mutate(pack = (ifelse(pack == "market", "nova", pack)))
id_all <- read_excel(file_path, sheet = "epicollect") %>%
mutate(id = str_pad(str_sub(tolower(ID), 1, 4), 4,
pad = "_", side = "right")) %>%
mutate(id = ifelse(id == "date", "datt", id)) %>%
filter(ID != "juniper") %>%
filter(!is.na(id)) %>% # Ótherwise the list also contains dens etc
mutate(Sex = case_when(
Sex == "Male" ~ "m",
Sex == "Female" ~ "f",
TRUE ~ Sex  # Keep other values unchanged, if any
)) %>%
full_join(id_groups, by = "id")
id_all <- id_all %>% # Filter for individuals you want to include
filter(Sex == "f" &
!is.na(pack))
file_path <- here("output", "focal_time.xlsx")
focal_time <- read_xlsx(file_path, "Sheet 1")
# Filter out everything that is not an affiliative interaction
###!!!!!!!!!!!!!!!! STILL CHECK WITH ETHOGRAM IF ALL AFFIL BEHAV IN THERE
df <- continuous %>%
filter(Action %in% c("ap", "le"))
# Order by date, protocol, dyad, and action (to ensure 'ap' comes before 'le')
df <- df[order(df$Date, df$Prot_nr, df$dyad, df$Action, df$Time_sec), ]
# Create a unique pairing number
df$pairing_num <- NA
pairing_counter <- 1
# Iterate over the dataframe to assign pairing numbers
for (i in seq_len(nrow(df))) {
if (df$Action[i] == "ap" && is.na(df$pairing_num[i])) {
# Find the next 'le' for the same dyad and identifier
le_index <- which(df$dyad == df$dyad[i] & df$Action == "le"
& is.na(df$pairing_num) & df$identifier == df$identifier[i])
if (length(le_index) > 0) {
df$pairing_num[i] <- pairing_counter
df$pairing_num[le_index[1]] <- pairing_counter
pairing_counter <- pairing_counter + 1
}
}
}
df$pairing_num[is.na(df$pairing_num)] <- "unmatched" # Identify unmatched approaches or leaves
# Create extra column that shows the time of the protocol in minutes
# (but working with comma! So does not show seconds)
df_prox1 <- df %>% arrange(Date, Prot_nr, Time_sec) %>% # sort again
mutate(protocol_minutes = Time_sec*1440)
# Create a new column showing the time difference between ap and le for
# rows with a corresponding pairing_num
df_prox1$time_diff <- NA
# Calculate the difference for each pairing_num directly
for (pair_num in unique(df_prox1$pairing_num[df_prox1$pairing_num != "unmatched"])) {
# Subset df_prox1 to contain only rows for the current pairing number
pair_rows <- df_prox1[df_prox1$pairing_num == pair_num, ]
# Calculate the difference
time_diff <- pair_rows$protocol_minutes[pair_rows$Action == "le"] -
pair_rows$protocol_minutes[pair_rows$Action == "ap"]
# Store the difference in the 'time_diff' column for all rows with current pairing number
df_prox1$time_diff[df_prox1$pairing_num == pair_num] <- time_diff
}
cut_off <- 0.0333 # 2 sec = 0.0333 min
proximity_summary <- df_prox1 %>%
distinct(dyad, pairing_num, .keep_all = TRUE) %>%  # Keep only unique dyad-pairing_num combinations
filter(time_diff > cut_off) %>%
# Only keep known individuals
filter(Actor_short %in% id_all$id & Receiver_short %in% id_all$id) %>%
group_by(dyad) %>%
summarize(
ap_le_time = sum(time_diff, na.rm = TRUE), # proximity sum
ap_le_count = as.numeric(n()) # number of times in proximity (considering the cutoff)
)
# Filter out SB EB
df2 <- continuous %>%
filter(Action %in% c("sb", "eb")) %>% # Only sb and eb
# Create action_sort so Action is sorted with sb before eb
mutate(action_sort = factor(Action,
levels = c("sb", "eb", setdiff(unique(Action), c("sb", "eb"))))) %>%
arrange(Date, Prot_nr, dyad, action_sort, Time_sec)
# Create a unique pairing number
df2$pairing_num <- NA
pairing_counter <- 1
# Iterate over the dataframe to assign pairing numbers
for (i in seq_len(nrow(df2))) {
if (df2$Action[i] == "sb" && is.na(df2$pairing_num[i])) {
# Find the next 'eb' for the same dyad and identifier
eb_index <- which(df2$dyad == df2$dyad[i] & df2$Action == "eb"
& is.na(df2$pairing_num) & df2$identifier == df2$identifier[i])
if (length(eb_index) > 0) {
df2$pairing_num[i] <- pairing_counter
df2$pairing_num[eb_index[1]] <- pairing_counter
pairing_counter <- pairing_counter + 1
}
}
}
df2$pairing_num[is.na(df2$pairing_num)] <- "unmatched" # Identify unmatched approaches or leaves
# Create extra column that shows the time of the protocol in minutes
# (but working with comma! So does not show seconds)
df2_contact <- df2 %>% arrange(Date, Prot_nr, Time_sec) %>% # sort again
mutate(protocol_minutes = Time_sec*1440)
# Create a new column showing the time difference between sb and eb for
# rows with a corresponding pairing_num
df2_contact$time_diff <- NA
# Calculate the difference for each pairing_num directly
for (pair_num in unique(df2_contact$pairing_num[df2_contact$pairing_num != "unmatched"])) {
# Subset df_prox1 to contain only rows for the current pairing number
pair_rows <- df2_contact[df2_contact$pairing_num == pair_num, ]
# Calculate the difference
time_diff <- pair_rows$protocol_minutes[pair_rows$Action == "eb"] -
pair_rows$protocol_minutes[pair_rows$Action == "sb"]
# Store the difference in the 'time_diff' column for all rows with current pairing number
df2_contact$time_diff[df2_contact$pairing_num == pair_num] <- time_diff
}
cut_off <- 0.0333 # 2 sec = 0.0333 min
